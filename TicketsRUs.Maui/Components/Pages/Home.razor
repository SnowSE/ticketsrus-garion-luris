@page "/"
@using TicketsRUs.ClassLib.Data
@using TicketsRUs.ClassLib.Services
@using TicketsRUs.Maui.Controllers
@inject ITicketService _service
@inject NavigationManager nav

<h1>Scan Test</h1>

<h3>TicketWeb_App</h3>

@if (dataLoaded)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">EventId</th>
                <th scope="col">EventName</th>
                <th scope="col">Start-Time</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ev in events)
            {
                <tr>
                    <th scope="row">@ev.Id</th>
                    <th scope="row">@ev.Name</th>
                    <th scope="row">@ev.StartTime</th>
                    <td>
                        <button @onclick="() => HandleEvent(ev.Id)" class="btn btn-primary">Buy</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

Scan Result: @scanner.ScanResult

@if (scanner.SuccessfulScan)
{
    <p class="bg-success">Success!</p>
}

@code
{
    QRScanner scanner;
    List<AvailableEvent> events = new List<AvailableEvent>();
    bool dataLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            scanner = new QRScanner(_service);
            await LoadEvents();
            dataLoaded = true;
            StateHasChanged();

            // 4 minutes
            while (true)
            {
                await Task.Delay(TimeSpan.FromMinutes(4));
                await SyncDatabase();
            }
        }
        catch (Exception ex)
        {
            int number = 1;
        }

    }

    private async Task LoadEvents()
    {
        events = (await _service.GetAllAvailableEvents()).ToList();
    }

    public async Task HandleEvent(int eventId)
    {
        await scanner.DoScanAsync(eventId);
    }

    private async Task SyncDatabase()
    {
        var syncController = new SyncController("luris-garion-ticketsrus.postgres.database.azure.com", _service);
        await syncController.Start();
    }
}